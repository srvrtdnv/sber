/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package ru.sarvartdinov.sber.api;

import ru.sarvartdinov.sber.api.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-01-21T12:53:25.046+05:00")

@Api(value = "users", description = "the users API")
public interface UsersApi {

    UsersApiDelegate getDelegate();

    @ApiOperation(value = "Get users by login", nickname = "getUsers", notes = "Ендпоинт для получения информации по указанным логинам пользователей", response = User.class, responseContainer = "List", tags={ "userApi", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Найденные пользователи", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 404, message = "Пользователи с запрошенными логинами не найдены") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<User>> getUsers(@NotNull @ApiParam(value = "Список логинов пользователей, по которым необходимо отдать информацию", required = true) @Valid @RequestParam(value = "logins", required = true) List<String> logins) {
        return getDelegate().getUsers(logins);
    }

}
